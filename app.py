from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from openai import OpenAI
import gspread
from google.oauth2.service_account import Credentials
from langdetect import detect
import os
import json

app = Flask(__name__)

# ‚úÖ LINE credentials
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

# ‚úÖ OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ‚úÖ Google Sheet credentials from ENV
cred_json = os.getenv("GOOGLE_CREDENTIAL_JSON")
try:
    cred_dict = json.loads(cred_json)
    print("‚úÖ JSON loaded successfully")
except Exception as e:
    print("‚ùå Error loading JSON:", e)
   
try:
    creds = Credentials.from_service_account_info(
        cred_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    print("‚úÖ Loaded Google Sheet scopes:", creds.scopes)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï
    client = gspread.authorize(creds)
    sheet = client.open("honda_prices2").worksheet("Prices2")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö Prices2
    rows = sheet.get_all_records()
    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Prices2:", rows)
    
except Exception as e:
    print("‚ùå Error loading Google Sheet credentials:", e)
    sheet = None  # fallback

# ‚úÖ ‡∏†‡∏≤‡∏©‡∏≤: ‡∏à‡∏î‡∏à‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
user_language_memory = {}  # user_id ‚Üí lang_code

def detect_user_language(user_id, message):
    if user_id not in user_language_memory:
        try:
            lang = detect(message)
            user_language_memory[user_id] = lang
            print(f"üî§ Detected language for {user_id}: {lang}")
        except:
            user_language_memory[user_id] = "th"  # fallback
    return user_language_memory[user_id]

def get_lang_instruction(lang_code):
    if lang_code == "th":
        return "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
    elif lang_code.startswith("zh"):
        return "ËØ∑Áî®‰∏≠ÊñáÂõûÂ§çÂÆ¢Êà∑„ÄÇ"
    elif lang_code == "en":
        return "Please reply in English."
    else:
        return "Please respond in the language the customer used."

# ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
def get_price_from_sheet(model_name):
    if not sheet:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

    try:
        data = sheet.get_all_records()
        for row in data:
            if row['‡∏£‡∏∏‡πà‡∏ô'].lower() == model_name.lower():
                return (
                    f"üìç ‡∏£‡∏∏‡πà‡∏ô {row['‡∏£‡∏∏‡πà‡∏ô']}:\n"
                    f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î: {row['‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î']:,} ‡∏ö‡∏≤‡∏ó\n"
                    f"üìÜ ‡∏ú‡πà‡∏≠‡∏ô 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {row['‡∏ú‡πà‡∏≠‡∏ô 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']:,} ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
                    f"üìÜ ‡∏ú‡πà‡∏≠‡∏ô 24 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {row['‡∏ú‡πà‡∏≠‡∏ô 24 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']:,} ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                )
        return f"‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô '{model_name}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    except Exception as e:
        print("‚ùå Error reading sheet:", e)
        return "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

@app.route("/")
def home():
    return "Funky Rider LINE Bot is running."

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("‚ùå Signature verification failed")
        abort(400)
    except Exception as e:
        print("‚ùå Unexpected error:", e)
        abort(500)

    return 'OK', 200

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_msg = event.message.text.strip()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
    if "‡∏£‡∏≤‡∏Ñ‡∏≤" in user_msg:
        model = user_msg.replace("‡∏£‡∏≤‡∏Ñ‡∏≤", "").strip()
        reply_text = get_price_from_sheet(model)
    else:
        lang_code = detect_user_language(user_id, user_msg)
        lang_instruction = get_lang_instruction(lang_code)

        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£ "Funky Rider" ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ Honda (‡∏Æ‡∏≠‡∏ô‡∏î‡πâ‡∏≤) ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢

- ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏ç‡∏¥‡∏á ‡∏≠‡∏≤‡∏¢‡∏∏ 36 ‡∏õ‡∏µ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ß‡πà‡∏≤ "‡πÄ‡∏≠‡∏°‡∏µ‡πà (Ami)"
- Funky Rider ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 199/7-8 ‡∏ñ‡∏ô‡∏ô‡∏´‡πâ‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏ß ‡∏ï‡∏≥‡∏ö‡∏•‡∏™‡∏∏‡πÄ‡∏ó‡∏û ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50200
- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: 099-556-6998 ‡∏´‡∏£‡∏∑‡∏≠ 099-556-6695
- ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô: https://maps.app.goo.gl/wXtWY7vpoNDZSTTe7

{lang_instruction}

‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå Honda ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
- ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á, ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•
- ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô/‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏≠‡∏á ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠

‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: https://www.thaihonda.co.th/honda/
                        """
                    },
                    {"role": "user", "content": user_msg}
                ]
            )
            reply_text = response.choices[0].message.content.strip()

        except Exception as e:
            print("‚ùå Error calling OpenAI:", e)
            if "insufficient_quota" in str(e):
                reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPT ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
            else:
                reply_text = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply_text)
    )

if __name__ == "__main__":
    app.run()
